{"version":3,"sources":["portfolio/landing.jsx","portfolio/about.jsx","portfolio/cards/flat.jsx","portfolio/education.jsx","portfolio/cards/paper.jsx","portfolio/work.jsx","portfolio/cards/expand.jsx","portfolio/volunteer.jsx","portfolio/cards/mini/award.jsx","portfolio/cards/mini/language.jsx","portfolio/cards/mini/publication.jsx","portfolio/cards/mini/skills.jsx","portfolio/cards/dialogPublication.jsx","portfolio/cards/dialogAward.jsx","portfolio/extra.jsx","portfolio/contact.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Landing","props","name","label","img","initScroll","className","params","particles","number","value","density","enable","size","random","anim","speed","size_min","line_linked","move","direction","out_mode","interactivity","events","onhover","mode","onclick","modes","bubble","distance","duration","opacity","repulse","src","alt","onClick","onKeyPress","role","tabIndex","About","about","summary","FlatCard","institution","degree","area","children","grade","startDate","endDate","Education","education","map","educationPlace","qualification","gpa","startdate","enddate","details","PaperCard","company","position","website","href","target","rel","Work","work","workPlace","ExpansionCard","organisation","handlePanelChange","expanded","id","ExpansionPanel","onChange","ExpansionPanelSummary","expandIcon","aria-controls","Typography","ExpansionPanelDetails","Volunteer","state","bind","panel","this","setState","volunteer","volunteerPlace","index","React","Component","MiniCard","title","items","handleDialogOpen","Card","CardContent","component","variant","style","textTransform","item","Chip","language","Transition","forwardRef","ref","Slide","AlertDialogSlide","open","handleDialogClose","date","publisher","Dialog","TransitionComponent","fullWidth","maxWidth","keepMounted","onClose","aria-labelledby","aria-describedby","padding","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","awarder","overflowWrap","Extra","awards","publications","languages","skills","openPublishDialog","openAwardDialog","userAwards","userPublication","userLanguages","userSkills","text","type","chip","releaseDate","AwardDisp","PublicDisp","SkillDisp","length","Contact","email","phone","location","addressline1","addressline2","city","country","pincode","App","profile","appData","user","imgUrl","scroll","scrollTo","window","innerHeight","top","Boolean","hostname","match","fetch","then","r","json","data","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d382565.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Particles from 'react-particles-js';\n\nconst Landing = (props) => {\n    const { name, label, img, initScroll } = props;\n    return (\n        <div className=\"portfolioPage1\">\n            <Particles\n                className=\"particles-bg\"\n                params={{\n                    particles: {\n                        number: {\n                            value: 200,\n                            density: {\n                                enable: true,\n                            },\n                        },\n                        size: {\n                            value: 5,\n                            random: true,\n                            anim: {\n                                speed: 4,\n                                size_min: 0.3,\n                            },\n                        },\n                        line_linked: {\n                            enable: true,\n                        },\n                        move: {\n                            random: true,\n                            speed: 1,\n                            direction: 'top',\n                            out_mode: 'out',\n                        },\n                    },\n                    interactivity: {\n                        events: {\n                            onhover: {\n                                enable: true,\n                                mode: 'bubble',\n                            },\n                            onclick: {\n                                enable: true,\n                                mode: 'repulse',\n                            },\n                        },\n                        modes: {\n                            bubble: {\n                                distance: 250,\n                                duration: 2,\n                                size: 0,\n                                opacity: 0,\n                            },\n                            repulse: {\n                                distance: 400,\n                                duration: 4,\n                            },\n                        },\n                    },\n                }}\n            />\n            <div className=\"portfolioPage1Details\">\n                <img\n                    className=\"portfolioUserImage\"\n                    src={img}\n                    alt=\"user profile representation\"\n                />\n                <div className=\"portfolioUserDetails\">\n                    <span className=\"portfolioUserName\">{name}</span>{' '}\n                    <span className=\"portfolioUserLabel\">| {label}</span>\n                    <div className=\"miniLine\" />\n                </div>\n            </div>\n            <div className=\"portfolioPage1SocialHolder\">\n                <div\n                    className=\"portfolioBtn\"\n                    onClick={initScroll}\n                    onKeyPress={initScroll}\n                    role=\"button\"\n                    tabIndex={0}\n                >\n                    Learn More\n                </div>\n            </div>\n        </div>\n    );\n};\n\nLanding.propTypes = {\n    name: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    img: PropTypes.string.isRequired,\n    initScroll: PropTypes.func.isRequired,\n};\n\nexport default Landing;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst About = (props) => {\n    const { summary } = props;\n    const about = summary.summary;\n    return (\n        <div className=\"portfolioPage aboutPage\">\n            <div className=\"portfolioPageSplit leftAbout\">\n                <div className=\"aboutCard\">About Me</div>\n            </div>\n            <div className=\"portfolioPageSplit rightAbout\">\n                <div className=\"portfolioUserSummary\">\n                    <div className=\"miniLine\" />\n                    {about}\n                    <div className=\"miniLine\" />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nAbout.propTypes = {\n    summary: PropTypes.oneOfType([PropTypes.object]).isRequired,\n};\n\nexport default About;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FlatCard = (props) => {\n    const {\n        institution,\n        degree,\n        area,\n        children,\n        grade,\n        startDate,\n        endDate,\n    } = props;\n    return (\n        <div className=\"portfolioFlat\">\n            <div className=\"portfolioCardTitle\">\n                <span className=\"portfolioCardTitleMain\">{institution} |</span>{' '}\n                <span className=\"portfolioCardTitleSub\">{degree}</span>\n                <div className=\"portfolioFlatSubTitle\">{area}</div>\n            </div>\n            <div className=\"portfolioFlatContent\">\n                <div className=\"portfolioFlatContentSummary\">{children}</div>\n                <div className=\"portfolioFlatSubTitle\">Grade Pt: {grade}</div>\n            </div>\n            <div className=\"portfolioCardDateContainer\">\n                {startDate} - {endDate}\n            </div>\n        </div>\n    );\n};\n\nFlatCard.propTypes = {\n    institution: PropTypes.string.isRequired,\n    degree: PropTypes.string.isRequired,\n    area: PropTypes.string.isRequired,\n    children: PropTypes.string.isRequired,\n    grade: PropTypes.number.isRequired,\n    startDate: PropTypes.string.isRequired,\n    endDate: PropTypes.string.isRequired,\n};\n\nexport default FlatCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FlatCard from './cards/flat';\n\nconst Education = (props) => {\n    const { education } = props;\n\n    return (\n        <div className=\"portfolioPage portfolioEducationPage\">\n            <div className=\"portfolioPageTitle\">\n                <div className=\"titleCard\">Education</div>\n            </div>\n            <div className=\"portfolioFlatContainer\">\n                {education.map((educationPlace) => (\n                    <FlatCard\n                        institution={educationPlace.institution}\n                        degree={educationPlace.qualification}\n                        area={educationPlace.area}\n                        grade={educationPlace.gpa}\n                        startDate={educationPlace.startdate}\n                        endDate={educationPlace.enddate}\n                        className=\"eduCard\"\n                    >\n                        {educationPlace.details}\n                    </FlatCard>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nEducation.propTypes = {\n    education: PropTypes.objectOf(PropTypes.object).isRequired,\n};\n\nexport default Education;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PaperCard = (props) => {\n    const { company, position, children, website, startDate, endDate } = props;\n    return (\n        <div className=\"portfolioCard portfolioWorkCard\">\n            <div className=\"portfolioCardTitle\">\n                <span className=\"portfolioCardTitleMain\">{company}</span>{' '}\n                <span className=\"portfolioCardTitleSub\">| {position}</span>\n            </div>\n            <div className=\"miniLine miniCardLine\" />\n            <div className=\"portfolioCardContent\">{children}</div>\n            <div className=\"miniLine miniCardLine\" />\n            <div className=\"portfolioCardWebsite\">\n                <span>Website |</span>{' '}\n                <a href={website} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {website}\n                </a>\n            </div>\n            <div className=\"portfolioCardDateContainer\">\n                {startDate} - {endDate}\n            </div>\n        </div>\n    );\n};\n\nPaperCard.propTypes = {\n    company: PropTypes.string.isRequired,\n    position: PropTypes.string.isRequired,\n    children: PropTypes.string.isRequired,\n    website: PropTypes.string.isRequired,\n    startDate: PropTypes.string.isRequired,\n    endDate: PropTypes.string.isRequired,\n};\n\nexport default PaperCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PaperCard from './cards/paper';\n\nconst Work = (props) => {\n    const { work } = props;\n\n    return (\n        <div className=\"portfolioPage workPage\">\n            <div className=\"portfolioPageTitle\">\n                <div className=\"titleCard\">Work</div>\n            </div>\n            <div className=\"portfolioCardContainer portfolioWorkCardContainer\">\n                {work.map((workPlace) => (\n                    <PaperCard\n                        company={workPlace.company}\n                        position={workPlace.position}\n                        website={workPlace.website}\n                        startDate={workPlace.startdate}\n                        endDate={workPlace.enddate}\n                        className=\"workCard\"\n                    >\n                        {workPlace.summary}\n                    </PaperCard>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nWork.propTypes = {\n    work: PropTypes.objectOf(PropTypes.object).isRequired,\n};\n\nexport default Work;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\n\nconst ExpansionCard = (props) => {\n    const {\n        organisation,\n        position,\n        children,\n        website,\n        startDate,\n        endDate,\n        handlePanelChange,\n        expanded,\n        id,\n    } = props;\n\n    return (\n        <ExpansionPanel\n            expanded={expanded === `panel${id}`}\n            onChange={() => handlePanelChange(`panel${id}`)}\n            className=\"portfolioVolunteerExpansionPanel\"\n        >\n            <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon className=\"expandIcon\" />}\n                aria-controls=\"panel1bh-content\"\n                id=\"panel1bh-header\"\n                className=\"expansionSummary\"\n            >\n                <div className=\"portfolioExpansionPanelTitle\">\n                    {organisation}\n                </div>\n                <Typography className=\"portfolioExpansionPanelSubTitle\">\n                    {position}\n                </Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails className=\"expansionExpanded\">\n                <div className=\"portfolioExpansionPanelDetails\">\n                    <Typography>{children}</Typography>\n                    <div className=\"miniLine miniCardLine\" />\n                    <div className=\"portfolioExpansionPanelWebsite\">\n                        <span>Website |</span>{' '}\n                        <a\n                            href={website}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {website}\n                        </a>\n                    </div>\n                    <div className=\"portfolioCardDateContainer\">\n                        {startDate} | {endDate}\n                    </div>\n                </div>\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n};\n\nExpansionCard.propTypes = {\n    organisation: PropTypes.string.isRequired,\n    position: PropTypes.string.isRequired,\n    children: PropTypes.string.isRequired,\n    website: PropTypes.string.isRequired,\n    startDate: PropTypes.string.isRequired,\n    endDate: PropTypes.string.isRequired,\n    handlePanelChange: PropTypes.func.isRequired,\n    expanded: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n};\n\nexport default ExpansionCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ExpansionCard from './cards/expand';\n\nclass Volunteer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: false,\n        };\n        this.handlePanelChange = this.handlePanelChange.bind(this);\n    }\n\n    handlePanelChange(panel) {\n        const { expanded } = this.state;\n        if (expanded === panel) {\n            this.setState({\n                expanded: false,\n            });\n        } else {\n            this.setState({\n                expanded: panel,\n            });\n        }\n    }\n\n    render() {\n        const { expanded } = this.state;\n        const { volunteer } = this.props;\n        return (\n            <div className=\"portfolioPage volunteerPage\">\n                <div className=\"portfolioPageSplit leftVolunteer\">\n                    {volunteer.map((volunteerPlace, index) => (\n                        <ExpansionCard\n                            organisation={volunteerPlace.organisation}\n                            position={volunteerPlace.position}\n                            website={volunteerPlace.website}\n                            startDate={volunteerPlace.startdate}\n                            endDate={volunteerPlace.enddate}\n                            handlePanelChange={this.handlePanelChange}\n                            expanded={expanded}\n                            id={index}\n                        >\n                            {volunteerPlace.summary}\n                        </ExpansionCard>\n                    ))}\n                </div>\n                <div className=\"portfolioPageSplit rightVolunteer\">\n                    Volunteering | POR\n                </div>\n            </div>\n        );\n    }\n}\n\nVolunteer.propTypes = {\n    volunteer: PropTypes.objectOf(PropTypes.object).isRequired,\n};\n\nexport default Volunteer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\n\nconst MiniCard = (props) => {\n    const { title, items, handleDialogOpen } = props;\n\n    return (\n        <Card className=\"portfolioExtraCard\">\n            <div className=\"portfolioExtraDetails\">\n                <CardContent className=\"portfolioExtraContent\">\n                    <Typography\n                        component=\"h5\"\n                        variant=\"h5\"\n                        style={{ textTransform: 'capitalize' }}\n                    >\n                        {title}\n                    </Typography>\n                    {items.map((item) => (\n                        <Chip\n                            className=\"chip\"\n                            variant=\"outlined\"\n                            label={item.title}\n                            onClick={() => handleDialogOpen(title, item)}\n                        />\n                    ))}\n                </CardContent>\n            </div>\n            <div className=\"portfolioExtraImage miniAwardImage\" />\n        </Card>\n    );\n};\n\nMiniCard.propTypes = {\n    title: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf.isRequired,\n    handleDialogOpen: PropTypes.func.isRequired,\n};\n\nexport default MiniCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\n\nconst MiniCard = (props) => {\n    const { title, items } = props;\n\n    return (\n        <Card className=\"portfolioExtraCard\">\n            <div className=\"portfolioExtraDetails\">\n                <CardContent className=\"portfolioExtraContent\">\n                    <Typography\n                        component=\"h5\"\n                        variant=\"h5\"\n                        style={{ textTransform: 'capitalize' }}\n                    >\n                        {title}\n                    </Typography>\n                    {items.map((item) => (\n                        <Chip\n                            className=\"chip\"\n                            variant=\"outlined\"\n                            label={item.language}\n                        />\n                    ))}\n                </CardContent>\n            </div>\n            <div className=\"portfolioExtraImage miniLanguageImage\" />\n        </Card>\n    );\n};\n\nMiniCard.propTypes = {\n    title: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf.isRequired,\n};\n\nexport default MiniCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\n\nconst MiniCard = (props) => {\n    const { title, items, handleDialogOpen } = props;\n\n    return (\n        <Card className=\"portfolioExtraCard\">\n            <div className=\"portfolioExtraDetails\">\n                <CardContent className=\"portfolioExtraContent\">\n                    <Typography\n                        component=\"h5\"\n                        variant=\"h5\"\n                        style={{ textTransform: 'capitalize' }}\n                    >\n                        {title}\n                    </Typography>\n                    {items.map((item) => (\n                        <Chip\n                            className=\"chip\"\n                            variant=\"outlined\"\n                            label={item.name}\n                            onClick={() => handleDialogOpen(title, item)}\n                        />\n                    ))}\n                </CardContent>\n            </div>\n            <div className=\"portfolioExtraImage miniPublicationImage\" />\n        </Card>\n    );\n};\n\nMiniCard.propTypes = {\n    title: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf.isRequired,\n    handleDialogOpen: PropTypes.func.isRequired,\n};\n\nexport default MiniCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\n\nconst MiniCard = (props) => {\n    const { title, items } = props;\n\n    return (\n        <Card className=\"portfolioExtraCard\">\n            <div className=\"portfolioExtraDetails\">\n                <CardContent className=\"portfolioExtraContent\">\n                    <Typography\n                        component=\"h5\"\n                        variant=\"h5\"\n                        style={{ textTransform: 'capitalize' }}\n                    >\n                        {title}\n                    </Typography>\n                    {items.map((item) => (\n                        <Chip\n                            className=\"chip\"\n                            variant=\"outlined\"\n                            label={item.name}\n                        />\n                    ))}\n                </CardContent>\n            </div>\n            <div className=\"portfolioExtraImage miniSkillImage\" />\n        </Card>\n    );\n};\n\nMiniCard.propTypes = {\n    title: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf.isRequired,\n};\n\nexport default MiniCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\nconst Transition = React.forwardRef(function TransitionComponent(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function AlertDialogSlide(props) {\n    const {\n        open,\n        handleDialogClose,\n        title,\n        children,\n        date,\n        publisher,\n        website,\n    } = props;\n    return (\n        <div>\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                fullWidth\n                maxWidth=\"sm\"\n                keepMounted\n                onClose={() => handleDialogClose({ title })}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n                style={{ padding: '50px' }}\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">{title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-slide-description\">\n                        <div className=\"portfolioPublishCompany\">\n                            <span>Published By -</span> {publisher}\n                        </div>\n                        <div className=\"portfolioPublishDate\">\n                            <span>Released On -</span> {date}\n                        </div>\n                        <br />\n                        <div className=\"portfolioPublishSummary\">\n                            {children}\n                        </div>\n                        <br />\n                        <div className=\"portfolioPublishWebsite\">\n                            <span>Website -</span>{' '}\n                            <a href={website}>{website}</a>\n                        </div>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => handleDialogClose({ title })}>\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nAlertDialogSlide.propTypes = {\n    open: PropTypes.bool.isRequired,\n    handleDialogClose: PropTypes.func.isRequired,\n    title: PropTypes.string.isRequired,\n    children: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    publisher: PropTypes.string.isRequired,\n    website: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\nconst Transition = React.forwardRef(function TransitionComponent(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function AlertDialogSlide(props) {\n    const { open, handleDialogClose, title, children, date, awarder } = props;\n    return (\n        <div>\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                fullWidth\n                maxWidth=\"sm\"\n                keepMounted\n                onClose={() => handleDialogClose({ title })}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n                style={{ padding: '50px' }}\n                className=\"awardDialog\"\n            >\n                <DialogTitle\n                    className=\"awardDialogTitle\"\n                    id=\"alert-dialog-slide-title\"\n                >\n                    {title}\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText\n                        id=\"alert-dialog-slide-description\"\n                        style={{ overflowWrap: 'normal' }}\n                    >\n                        <div className=\"portfolioAwardCompany\">\n                            <span>Awarded By -</span> {awarder}\n                        </div>\n                        <div className=\"portfolioAwardDate\">\n                            <span>On -</span> {date}\n                        </div>\n                        <br />\n                        <div className=\"portfolioAwardSummary\">{children}</div>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => handleDialogClose({ title })}>\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nAlertDialogSlide.propTypes = {\n    open: PropTypes.bool.isRequired,\n    handleDialogClose: PropTypes.func.isRequired,\n    title: PropTypes.string.isRequired,\n    children: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    awarder: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AwardCard from './cards/mini/award';\nimport LanguageCard from './cards/mini/language';\nimport PublicationCard from './cards/mini/publication';\nimport SkillCard from './cards/mini/skills';\nimport DialogPublication from './cards/dialogPublication';\nimport DialogAward from './cards/dialogAward';\n\nclass Extra extends React.Component {\n    constructor(props) {\n        super(props);\n        const { awards, publications, languages, skills } = this.props;\n        this.state = {\n            openPublishDialog: false,\n            openAwardDialog: false,\n            userAwards: awards,\n            userPublication: publications,\n            userLanguages: languages,\n            userSkills: skills,\n            title: '',\n            company: '',\n            date: '',\n            website: '',\n            text: '',\n        };\n        this.handleDialogOpen = this.handleDialogOpen.bind(this);\n        this.handleDialogClose = this.handleDialogClose.bind(this);\n    }\n\n    handleDialogOpen(type, chip) {\n        if (type === 'publications') {\n            this.setState({\n                openPublishDialog: true,\n                title: chip.name,\n                company: chip.publisher,\n                date: chip.releaseDate,\n                website: chip.website,\n                text: chip.summary,\n            });\n        } else if (type === 'awards') {\n            this.setState({\n                openAwardDialog: true,\n                title: chip.title,\n                company: chip.awarder,\n                date: chip.date,\n                text: chip.details,\n            });\n        }\n    }\n\n    handleDialogClose() {\n        this.setState({\n            openAwardDialog: false,\n            openPublishDialog: false,\n        });\n    }\n\n    render() {\n        const {\n            title,\n            openPublishDialog,\n            openAwardDialog,\n            company,\n            date,\n            website,\n            text,\n            userAwards,\n            userLanguages,\n            userSkills,\n            userPublication,\n        } = this.state;\n\n        let AwardDisp;\n        let PublicDisp;\n        let SkillDisp;\n\n        if (userAwards.length > 0 && userAwards[0].title !== '') {\n            AwardDisp = (\n                <AwardCard\n                    title=\"awards\"\n                    items={userAwards}\n                    handleDialogOpen={this.handleDialogOpen}\n                />\n            );\n        }\n        if (userPublication.length > 0 && userPublication[0].name !== '') {\n            PublicDisp = (\n                <PublicationCard\n                    title=\"publications\"\n                    items={userPublication}\n                    handleDialogOpen={this.handleDialogOpen}\n                />\n            );\n        }\n        if (userSkills.length > 0 && userSkills[0].name !== '') {\n            SkillDisp = <SkillCard title=\"skills\" items={userSkills} />;\n        }\n\n        return (\n            <div className=\"portfolioPage extrasPage\">\n                <div className=\"portfolioPageTitle floodFill\">Extras</div>\n                <div className=\"portfolioExtrasContainer\">\n                    {AwardDisp}\n                    {PublicDisp}\n                    {SkillDisp}\n                    <LanguageCard\n                        title=\"languages\"\n                        items={userLanguages}\n                        handleDialogOpen={this.handleDialogOpen}\n                    />\n                </div>\n                <DialogPublication\n                    title={title}\n                    handleDialogClose={this.handleDialogClose}\n                    open={openPublishDialog}\n                    publisher={company}\n                    date={date}\n                    website={website}\n                >\n                    {text}\n                </DialogPublication>\n                <DialogAward\n                    title={title}\n                    handleDialogClose={this.handleDialogClose}\n                    open={openAwardDialog}\n                    awarder={company}\n                    date={date}\n                >\n                    {text}\n                </DialogAward>\n            </div>\n        );\n    }\n}\n\nExtra.propTypes = {\n    awards: PropTypes.oneOfType([PropTypes.object]).isRequired,\n    publications: PropTypes.oneOfType([PropTypes.object]).isRequired,\n    languages: PropTypes.oneOfType([PropTypes.object]).isRequired,\n    skills: PropTypes.oneOfType([PropTypes.object]).isRequired,\n};\n\nexport default Extra;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Contact = (props) => {\n    const { email, phone, location } = props;\n\n    return (\n        <div className=\"portfolioPage contactPage\">\n            <div className=\"portfolioPageTitle\">\n                <div className=\"titleCard\">Contact Me</div>\n            </div>\n            <div className=\"portfolioContactCard\">\n                <div className=\"miniLine\" />\n                <li>\n                    <span className=\"portfolioContactCardInfo\">\n                        <span className=\"portfolioContactCardInfoTitle\">\n                            Email ID -\n                        </span>{' '}\n                        <span className=\"portfolioContactCardInfoDetails\">\n                            {email}\n                        </span>\n                    </span>\n                </li>\n                <li>\n                    <span className=\"portfolioContactCardInfo\">\n                        <span className=\"portfolioContactCardInfoTitle\">\n                            Contact No -\n                        </span>{' '}\n                        <span className=\"portfolioContactCardInfoDetails\">\n                            {phone}\n                        </span>\n                    </span>\n                </li>\n                <div className=\"miniLine\" />\n            </div>\n            <div className=\"portfolioContactCard\">\n                <div className=\"miniLine\" />\n                <div className=\"portfolioContactCardAddress\">\n                    <span>{location.addressline1}</span>\n                    <br />\n                    <span>{location.addressline2}</span>\n                    <br />\n                    {location.city}\n                    <br />\n                    {location.country} | {location.pincode}\n                </div>\n                <div className=\"miniLine\" />\n            </div>\n            {/* <div className=\"portfolioContactCard portfolioContactSocialCard\">\n        <span>insert social icons with clickable links</span>\n      </div> */}\n        </div>\n    );\n};\n\nContact.propTypes = {\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n    location: PropTypes.objectOf(PropTypes.object).isRequired,\n};\n\nexport default Contact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { animateScroll as scroll } from 'react-scroll';\nimport Landing from './portfolio/landing';\nimport About from './portfolio/about';\nimport Education from './portfolio/education';\nimport Work from './portfolio/work';\nimport Volunteer from './portfolio/volunteer';\nimport Extra from './portfolio/extra';\nimport Contact from './portfolio/contact';\nimport './index.css';\nimport './portfolio.css';\n\nfunction App(props) {\n    const scrollFunc = () => scroll.scrollTo(window.innerHeight);\n    const { appData } = props;\n    const { profile } = appData;\n    return (\n        <div className=\"portfolioContainerFull\">\n            <Landing\n                name={profile.user.name}\n                label={profile.about.label}\n                img={profile.about.imgUrl}\n                initScroll={scrollFunc}\n            />\n            <div\n                className=\"portfolioBodyCont\"\n                style={{ top: `${window.innerHeight}px` }}\n            >\n                <About summary={profile.about} top={window.innerHeight} />\n                <Education education={profile.education} />\n                <Work work={profile.work} />\n                <Volunteer volunteer={profile.volunteer} />\n                <Extra\n                    awards={profile.awards}\n                    publications={profile.publications}\n                    languages={profile.languages}\n                    skills={profile.skills}\n                />\n                <Contact\n                    email={profile.user.email}\n                    phone={profile.about.number}\n                    location={profile.location}\n                />\n            </div>\n        </div>\n    );\n}\n\nApp.propTypes = {\n    appData: PropTypes.oneOfType([PropTypes.object]).isRequired,\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfetch(`./Data/file.json`)\n    .then((r) => r.json())\n    .then((data) => {\n        ReactDOM.render(\n            <App appData={data} />,\n            document.getElementById('root')\n        );\n    });\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}